// ----------------------------------
// RSDK Project: RSDK-GDT 
// Script Description: CD Background Animation
// Script Author: Christian Whitehead adapted with the RSDK Script Converter to v4 and with manual modifications by Zero242
// Original v3/CD Script Unpacked by Rubberduckycooly's script unpacker
// ----------------------------------

// Aliases
private alias object.value0 : Object.AngleFull
private alias object.value1 : Object.AngleRounded
private alias object.value2 : Object.BackBGSonicXPos
private alias object.value3 : Object.FrontBGSonicXPos
private alias object.value4 : Object.ZPos

// Ink Effects
private alias 1 : INK_BLEND

// Priority
private alias 1 : PRIORITY_ACTIVE

// Face Buffer Flags
private alias 2 : FACE_FLAG_COLOURED_3D


event ObjectDraw
	// The "Full" value ranges from 0 to 1023, using 10 bits
	Object.AngleFull++
	Object.AngleFull &= 1023

	// The "Rounded" value, however, ranges from 0 to 511, using 9 bits, as RSDK's anlges are 512-based rather than 1024-based
	Object.AngleRounded = Object.AngleFull
	Object.AngleRounded >>= 1

	// From this rounded value, now we actually do stuff

	// First, manage the depth of the BG
	Sin(Object.ZPos, Object.AngleRounded)
	Object.ZPos += 0x5000
	MatrixTranslateXYZ(MAT_WORLD, 0, 0, Object.ZPos)

	// Now, handle the rotating of the BG
	temp0 = Object.AngleRounded
	MatrixRotateXYZ(MAT_VIEW, 0, 0, temp0)

	// Draw the rectangles here, notably before we draw the Sonic sprites
	Draw3DScene()

	// Now after we've drawn the 3d stuff, draw Sonic himself

	Object.BackBGSonicXPos = screen.xcenter
	Object.BackBGSonicXPos -= 4
	DrawSpriteScreenFX(0, FX_INK, Object.BackBGSonicXPos, screen.ycenter)

	Object.FrontBGSonicXPos = screen.xcenter
	Object.FrontBGSonicXPos += 4
	DrawSpriteScreenFX(0, FX_INK, Object.FrontBGSonicXPos, screen.ycenter)
end event


event ObjectStartup
	// So this is removing the stage's FG layer but,
	// the stage's configuration in the act file already has it set up like that anyways...
	stage.activeLayer[0] = 9

	LoadSpriteSheet("Menu/MenuGfx1_EN.gif")

	SpriteFrame(-160, -104, 320, 224, 0, 0) // #0 - Sonic Background

	arrayPos0 = 32
	while arrayPos0 < 1056
		if object[arrayPos0].type == TypeName[BG Animation]
			object[arrayPos0].priority = PRIORITY_ACTIVE
			object[arrayPos0].drawOrder = 2
			object[arrayPos0].inkEffect = INK_BLEND
		end if

		arrayPos0++
	loop

	// The three rotating rectanlges in the background are actually 3d elements, let's setup them up here

	// First, reset all the matrix values
	MatrixTranslateXYZ(MAT_WORLD, 0, 0, 0)
	MatrixRotateXYZ(MAT_VIEW, 0, 0, 0)

	// Three rectanlges, four edges per rectanlge, yup that makes 12 corners in total!
	scene3D.vertexCount = 12
	scene3D.faceCount = 3

	// Set the vertex coordinates for the first rectangle

	// 0 - Top left
	vertexBuffer[0].x = -0xC800
	vertexBuffer[0].y = 0xC800
	vertexBuffer[0].z = 256

	// 1 - Top right
	vertexBuffer[1].x = 0xC00
	vertexBuffer[1].y = 0xC800
	vertexBuffer[1].z = 256

	// 2 - Bottom left
	vertexBuffer[2].x = -0xC800
	vertexBuffer[2].y = 0x3000
	vertexBuffer[2].z = 256

	// 3 - Bottom right
	vertexBuffer[3].x = 0xC00
	vertexBuffer[3].y = 0x3000
	vertexBuffer[3].z = 256

	// Set the faces of the first rectangle
	faceBuffer[0].a = 0
	faceBuffer[0].b = 1
	faceBuffer[0].c = 2
	faceBuffer[0].d = 3

	faceBuffer[0].flag = FACE_FLAG_COLOURED_3D

	// Setting the color of the first rectangle, giving it a green of sorts (0x80E040)
	faceBuffer[0].color = 128
	faceBuffer[0].color <<= 16
	temp0 = 224
	temp0 <<= 8
	faceBuffer[0].color += temp0
	faceBuffer[0].color += 64
	faceBuffer[0].color += 0x7F000000 // Half transparency

	// Now, set up the second rectanlge

	// 4 - Top left
	vertexBuffer[4].x = -0xC800
	vertexBuffer[4].y = 0x3000
	vertexBuffer[4].z = 256

	// 5 - Top right
	vertexBuffer[5].x = 0xC00
	vertexBuffer[5].y = 0x3000
	vertexBuffer[5].z = 256

	// 6 - Bottom left
	vertexBuffer[6].x = -0xC800
	vertexBuffer[6].y = -0xC800
	vertexBuffer[6].z = 256

	// 7 - Bottom right
	vertexBuffer[7].x = 0xC00
	vertexBuffer[7].y = -0xC800
	vertexBuffer[7].z = 256

	// Set the faces of the second rectangle
	faceBuffer[1].a = 4
	faceBuffer[1].b = 5
	faceBuffer[1].c = 6
	faceBuffer[1].d = 7

	faceBuffer[1].flag = FACE_FLAG_COLOURED_3D

	// Setting the color of the second rectangle, this one gets a cool orange (0xE0A060)
	faceBuffer[1].color = 224
	faceBuffer[1].color <<= 16
	temp0 = 160
	temp0 <<= 8
	faceBuffer[1].color += temp0
	faceBuffer[1].color += 96
	faceBuffer[1].color += 0x7F000000 // Once again, half transparency

	// And last but not least, set up the third rectangle

	// 8 - Top left
	vertexBuffer[8].x = 0xB00
	vertexBuffer[8].y = 0xC800
	vertexBuffer[8].z = 256

	// 9 - Top right
	vertexBuffer[9].x = 0xC800
	vertexBuffer[9].y = 0xC800
	vertexBuffer[9].z = 256

	// 10 - Bottom left
	vertexBuffer[10].x = 0xB00
	vertexBuffer[10].y = -0xC800
	vertexBuffer[10].z = 256

	// 11 - Bottom right
	vertexBuffer[11].x = 0xC800
	vertexBuffer[11].y = -0xC800
	vertexBuffer[11].z = 256

	// Set the faces of the third rectangle
	faceBuffer[2].a = 8
	faceBuffer[2].b = 9
	faceBuffer[2].c = 10
	faceBuffer[2].d = 11

	faceBuffer[2].flag = FACE_FLAG_COLOURED_3D

	// Setting the color of the a rectangle one last time, the third one gets a nice blue (0x8080E0)
	faceBuffer[2].color = 128
	faceBuffer[2].color <<= 16
	temp0 = 128
	temp0 <<= 8
	faceBuffer[2].color += temp0
	faceBuffer[2].color += 224
	faceBuffer[2].color += 0x7F000000
end event


// ========================
// Editor Subs
// ========================

event RSDKDraw
	DrawSprite(0)
end event


event RSDKLoad
	LoadSpriteSheet("Menu/MenuGfx1_EN.gif")
	SpriteFrame(-160, -104, 320, 224, 0, 0) // Sonic Background


end event
