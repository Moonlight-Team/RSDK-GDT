// ----------------------------------
// RSDK Project: RSDK-GDT 
// Script Description: CD Extras Menu
// Script Author: Christian Whitehead adapted with the RSDK Script Converter to v4 and with manual modifications by Zero242
// Original v3/CD Script Unpacked by Rubberduckycooly's script unpacker
// ----------------------------------

// Aliases
private alias object.value0 : Object.Timer
private alias object.value1 : Object.CurrentButton

//Object[+4] and [+ArrayPos0] are blank objects just to add values
private alias object[+4].value1 : Helper.VMCurrentButton
private alias object.value2 : Helper.FlickerState

//Object[33] is MenuHeading
private alias object[33].state : MenuHeading.State
private alias object[33].propertyValue : MenuHeading.Header

//Object[-1] is MenuWindow
private alias object[-1].state : MenuWindow.State
private alias object[1].value4 : MenuWindow.BackTouchPress

// States
private alias 0 : EXTRASMENU_ENTER_MENU
private alias 1 : EXTRASMENU_CONTROLS
private alias 2 : EXTRASMENU_SELECTED_OPTION
private alias 3 : EXTRASMENU_LOAD_EXTRA_STAGE
private alias 4 : EXTRASMENU_LOAD_VISUALMODE
private alias 5 : EXTRASMENU_VISUALMODE_FADEIN
private alias 6 : EXTRASMENU_VISUALMODE
private alias 7 : EXTRASMENU_VISUALMODE_SELECTED
private alias 8 : EXTRASMENU_VISUALMODE_VIDEOPLAY
private alias 9 : EXTRASMENU_VISUALMODE_FADEOUT
private alias 10 : EXTRASMENU_VISUALMODE_RETURN
private alias 11 : EXTRASMENU_EXIT_MENU
private alias 12 : EXTRASMENU_FADEIN
private alias 13 : EXTRASMENU_RETURN_TO_TITLE

// Menu Heading States
private alias 1 : MENUHEADING_LEAVE_SCREEN

// Menu Heading Property Values
private alias 5 : MAINMENU_HEADER

// Menu Window States
private alias 3 : MENUWINDOW_SHRINK

// Menu Button States
private alias 1 : MENUBUTTON_BUTTONS_IN

// Presentation Stages
private alias 0 : STAGE_P_TITLE
private alias 3 : STAGE_P_STAGESELECT
private alias 4 : STAGE_P_SOUNDTEST
private alias 5 : STAGE_P_DAGARDEN

// Player
private alias 0 : PLAYER_SONIC

// Global SFX
private alias 23 : SFX_G_MENUBUTTON
private alias 27 : SFX_G_SELECT

// Stage SFX
private alias 1 : SFX_S_BACKBUTTON

// Languages
private alias 0 : LANG_ENGLISH
private alias 1 : LANG_FRENCH
private alias 2 : LANG_ITALIAN
private alias 3 : LANG_DEUTSCH
private alias 4 : LANG_SPANISH
private alias 5 : LANG_JAPANESE

// Soundtrack
private alias 0 : OST_JP

//Engine & CallBacks
private alias 2 : MESSAGE_LOSTFOCUS

// Function declarations
reserve function ExtrasMenu_DrawUnlocks


public function ExtrasMenu_DrawUnlocks
	switch Helper.FlickerState[+ArrayPos0]
	case false
		if arrayPos0 == Object.CurrentButton
			DrawSpriteScreenFX(9, FX_INK, object.xpos, object.ypos)
			temp0 = arrayPos0
			temp0 += 14
			DrawSpriteScreenFX(temp0, FX_INK, object.xpos, object.ypos)
		else
			temp0 = arrayPos0
			temp0 += 10
			DrawSpriteScreenFX(temp0, FX_INK, object.xpos, object.ypos)
		end if
		break

	case true
		temp0 = Object.Timer
		temp0 &= 3
		temp0 >>= 1
		DrawSpriteScreenFX(9, FX_INK, object.xpos, object.ypos)
		if temp0 == 0
			temp0 = arrayPos0
			temp0 += 14
			DrawSpriteScreenFX(temp0, FX_INK, object.xpos, object.ypos)
		end if
		break

	end switch

	DrawSpriteScreenFX(8, FX_INK, object.xpos, object.ypos)
	switch arrayPos0
	case 0
		if Options.DAGardenFlag == true
			DrawSpriteScreenFX(0, FX_INK, object.xpos, object.ypos)
		else
			DrawSpriteScreenFX(1, FX_INK, object.xpos, object.ypos)
		end if
		break

	case 1
		if Options.VisualModeFlag == true
			DrawSpriteScreenFX(0, FX_INK, object.xpos, object.ypos)
		else
			DrawSpriteScreenFX(1, FX_INK, object.xpos, object.ypos)
		end if
		break

	case 2
		if Options.SoundTestFlag == true
			DrawSpriteScreenFX(0, FX_INK, object.xpos, object.ypos)
		else
			DrawSpriteScreenFX(1, FX_INK, object.xpos, object.ypos)
		end if
		break

	case 3
		if Options.StageSelectFlag == true
			DrawSpriteScreenFX(0, FX_INK, object.xpos, object.ypos)
		else
			DrawSpriteScreenFX(1, FX_INK, object.xpos, object.ypos)
		end if
		break
	end switch
end function


event ObjectUpdate
	switch object.state
	case EXTRASMENU_ENTER_MENU
		if Options.PhysicalControls == false
			Object.CurrentButton = -1
		end if
		object.xpos = screen.xcenter
		object.xpos -= 126
		if Object.Timer < 256
			object.alpha = Object.Timer
			Object.Timer += 6
		else
			Object.Timer = 0
			object.alpha = 255
			object.state++
		end if
		break

	case EXTRASMENU_CONTROLS
		//checkResult = true
		CheckEqual(Options.PhysicalControls, true)

		// 2011 Steam lacks Options.PhysicalControls, so we force it here first and the other platforms can override it
		if checkResult == true
			if keyPress[0].up == true
				Object.CurrentButton--
				if Object.CurrentButton < 0
					Object.CurrentButton = 3
				end if
				PlaySfx(SfxName[Menu Move], false)
			end if

			if keyPress[0].down == true
				Object.CurrentButton++
				if Object.CurrentButton > 3
					Object.CurrentButton = 0
				end if
				PlaySfx(SfxName[Menu Move], false)
			end if

			CheckTouchRect(0, 0, screen.xsize, screen.ysize) //Touch Behaviour Check
			if checkResult > -1
				Options.PhysicalControls = false
				Object.CurrentButton = -1
			end if
		else
			CheckTouchRect(0, 0, screen.xsize, screen.ysize) //Touch Press Reset
			temp3 = checkResult

			temp0 = 0
			CallFunction(LoadSaveMenu_CheckTouchSave) //D. A. Garden Touch Press
			if checkResult > -1
				Object.CurrentButton = 0
			else
				if temp3 < 0
					if Object.CurrentButton == 0
						keyPress[0].start = true
					end if
				else
					if Object.CurrentButton == 0
						Object.CurrentButton = -1
					end if
				end if
			end if

			temp0 = 1
			CallFunction(LoadSaveMenu_CheckTouchSave) //Visual Mode Touch Press
			if checkResult > -1
				Object.CurrentButton = 1
			else
				if temp3 < 0
					if Object.CurrentButton == 1
						keyPress[0].start = true
					end if
				else
					if Object.CurrentButton == 1
						Object.CurrentButton = -1
					end if
				end if
			end if

			temp0 = 2
			CallFunction(LoadSaveMenu_CheckTouchSave) //Sound Test Touch Press
			if checkResult > -1
				Object.CurrentButton = 2
			else
				if temp3 < 0
					if Object.CurrentButton == 2
						keyPress[0].start = true
					end if
				else
					if Object.CurrentButton == 2
						Object.CurrentButton = -1
					end if
				end if
			end if

			temp0 = 3
			CallFunction(LoadSaveMenu_CheckTouchSave) //Stage Select Touch Press
			if checkResult > -1
				Object.CurrentButton = 3
			else
				if temp3 < 0
					if Object.CurrentButton == 3
						keyPress[0].start = true
					end if
				else
					if Object.CurrentButton == 3
						Object.CurrentButton = -1
					end if
				end if
			end if

			CallFunction(MenuHeading_CheckTouchBack) //Back Button Touch Press
			if keyPress[0].up == true
				Object.CurrentButton = 3
				Options.PhysicalControls = true
			end if

			if keyPress[0].down == true
				Object.CurrentButton = 0
				Options.PhysicalControls = true
			end if
		end if

		checkResult = false
		if Object.CurrentButton > -1
			if keyPress[0].start == true
				checkResult = true
			end if

			if keyPress[0].buttonA == true
				checkResult = true
			end if
		end if

		if checkResult == true
			if Object.CurrentButton < 4
				switch Object.CurrentButton
				case 0
					if Options.DAGardenFlag == true
						arrayPos0 = Object.CurrentButton
						Helper.FlickerState[+ArrayPos0] = true
						object.state++
						StopMusic()
						PlaySfx(SfxName[Menu Select], false)
					else
						if Options.PhysicalControls == false
							Object.CurrentButton = -1
						end if
					end if
					break

				case 1
					if Options.VisualModeFlag == true
						arrayPos0 = Object.CurrentButton
						Helper.FlickerState[+ArrayPos0] = true
						object.state++
						PlaySfx(SfxName[Menu Select], false)
					else
						if Options.PhysicalControls == false
							Object.CurrentButton = -1
						end if
					end if
					break

				case 2
					if Options.SoundTestFlag == true
						arrayPos0 = Object.CurrentButton
						Helper.FlickerState[+ArrayPos0] = true
						object.state++
						StopMusic()
						PlaySfx(SfxName[Menu Select], false)
					else
						if Options.PhysicalControls == false
							Object.CurrentButton = -1
						end if
					end if
					break

				case 3
					if Options.StageSelectFlag == true
						arrayPos0 = Object.CurrentButton
						Helper.FlickerState[+ArrayPos0] = true
						object.state++
						StopMusic()
						PlaySfx(SfxName[Menu Select], false)
					else
						if Options.PhysicalControls == false
							Object.CurrentButton = -1
						end if
					end if
					break

				end switch
			end if
		end if
		if keyPress[0].buttonB == true
			Object.Timer = 248
			object.state = EXTRASMENU_EXIT_MENU
			PlaySfx(SfxName[Menu Back], false)
		end if
		break

	case EXTRASMENU_SELECTED_OPTION
		if Object.Timer < 30
			Object.Timer++
		else
			Object.Timer = 0
			arrayPos0 = Object.CurrentButton
			Helper.FlickerState[+ArrayPos0] = false
			switch Object.CurrentButton
			case 0
				object.state = EXTRASMENU_LOAD_EXTRA_STAGE
				break

			case 1
				object.state = EXTRASMENU_LOAD_VISUALMODE
				object.ypos = 40
				object.ypos *= Object.CurrentButton
				object.ypos += screen.ycenter
				object.ypos -= 87
				break

			case 2
				object.state = EXTRASMENU_LOAD_EXTRA_STAGE
				break

			case 3
				object.state = EXTRASMENU_LOAD_EXTRA_STAGE
				break

			end switch
		end if
		break

	case EXTRASMENU_LOAD_EXTRA_STAGE
		if Object.Timer < 320
			Object.Timer += 8
		else
			switch Object.CurrentButton
			case 0
				stage.listPos = STAGE_P_DAGARDEN
				LoadStage()
				break

			case 2
				stage.listPos = STAGE_P_SOUNDTEST
				LoadStage()
				break

			case 3
				stage.listPos = STAGE_P_STAGESELECT
				LoadStage()
				break

			end switch
		end if

		temp0 = Object.Timer
		if temp0 > 255
			temp0 = 255
		end if
		SetScreenFade(0, 0, 0, temp0)
		break

	case EXTRASMENU_LOAD_VISUALMODE
		temp0 = screen.ycenter
		temp0 -= 87
		if object.ypos > temp0
			object.ypos -= 8
			if object.ypos < temp0
				object.ypos = temp0
			end if
		else
			object.state++
			object.alpha = 0
			Helper.VMCurrentButton = 0
			if Options.PhysicalControls == false
				Helper.VMCurrentButton = -1
			end if
		end if
		break

	case EXTRASMENU_VISUALMODE_FADEIN
		if Object.Timer < 256
			object.alpha = Object.Timer
			Object.Timer += 8
		else
			Object.Timer = 0
			object.alpha = 255
			object.state++
		end if
		break

	case EXTRASMENU_VISUALMODE
		arrayPos0 = Object.CurrentButton
		//checkResult = true
		CheckEqual(Options.PhysicalControls, true)
		// 2011 Steam lacks Options.PhysicalControls, so we force it here first and the other platforms can override it
		if checkResult == true
			if keyPress[0].left == true
				Helper.VMCurrentButton--
				PlaySfx(SfxName[Menu Move], false)
				if Helper.VMCurrentButton < 0
					Helper.VMCurrentButton = 3
				end if
			end if

			if keyPress[0].right == true
				Helper.VMCurrentButton++
				PlaySfx(SfxName[Menu Move], false)
				if Helper.VMCurrentButton > 3
					Helper.VMCurrentButton = 0
				end if
			end if

			if keyPress[0].up == true
				Helper.VMCurrentButton -= 2
				PlaySfx(SfxName[Menu Move], false)
				if Helper.VMCurrentButton < 0
					Helper.VMCurrentButton += 4
				end if
			end if

			if keyPress[0].down == true
				Helper.VMCurrentButton += 2
				PlaySfx(SfxName[Menu Move], false)
				if Helper.VMCurrentButton > 3
					Helper.VMCurrentButton -= 4
				end if
			end if

		end if
		// Just to make it look neat, instead of continuing the code from an open if on another platform, we ask again for a check in the physical controls
		if Options.PhysicalControls == true
			CheckTouchRect(0, 0, screen.xsize, screen.ysize) //Touch Behaviour Check
			if checkResult > -1
				Options.PhysicalControls = false
				Helper.VMCurrentButton = -1
			end if

		else
			CheckTouchRect(0, 0, screen.xsize, screen.ysize) //Touch Input Reset
			temp3 = checkResult

			temp0 = screen.xcenter
			temp0 -= 88
			temp1 = screen.xcenter
			temp1 -= 40
			CheckTouchRect(temp0, 72, temp1, 120) //Opening Touch Press
			if checkResult > -1
				Helper.VMCurrentButton = 0
			else
				if temp3 < 0
					if Helper.VMCurrentButton == 0
						keyPress[0].start = true
					end if
				else
					if Helper.VMCurrentButton == 0
						Helper.VMCurrentButton = -1
					end if
				end if
			end if

			CheckTouchRect(temp0, 129, temp1, 177) //Good Ending Touch Press
			if checkResult > -1
				Helper.VMCurrentButton = 2
			else
				if temp3 < 0
					if Helper.VMCurrentButton == 2
						keyPress[0].start = true
					end if
				else
					if Helper.VMCurrentButton == 2
						Helper.VMCurrentButton = -1
					end if
				end if
			end if

			temp0 = screen.xcenter
			temp0 += 40
			temp1 = screen.xcenter
			temp1 += 88
			CheckTouchRect(temp0, 72, temp1, 120) //Pencil Test Touch Press
			if checkResult > -1
				Helper.VMCurrentButton = 1
			else
				if temp3 < 0
					if Helper.VMCurrentButton == 1
						keyPress[0].start = true
					end if
				else
					if Helper.VMCurrentButton == 1
						Helper.VMCurrentButton = -1
					end if
				end if
			end if

			CheckTouchRect(temp0, 129, temp1, 177) //Bad Ending Touch Press
			if checkResult > -1
				Helper.VMCurrentButton = 3
			else
				if temp3 < 0
					if Helper.VMCurrentButton == 3
						keyPress[0].start = true
					end if
				else
					if Helper.VMCurrentButton == 3
						Helper.VMCurrentButton = -1
					end if
				end if
			end if

			temp0 = screen.xsize
			temp0 -= 96
			CheckTouchRect(temp0, 192, screen.xsize, screen.ysize) //Back Touch Press
			if checkResult > -1
				Helper.VMCurrentButton = 4
				MenuWindow.BackTouchPress = true
			else
				MenuWindow.BackTouchPress = false
				if temp3 < 0
					if Helper.VMCurrentButton == 4
						keyPress[0].buttonB = true
					end if
				else
					if Helper.VMCurrentButton == 4
						Helper.VMCurrentButton = -1
					end if
				end if
			end if
			//Turn on Physical Controls
			if keyPress[0].left == true
				Helper.VMCurrentButton = 1
				Options.PhysicalControls = true
			end if

			if keyPress[0].right == true
				Helper.VMCurrentButton = 0
				Options.PhysicalControls = true
			end if

			if keyPress[0].up == true
				Helper.VMCurrentButton = 3
				Options.PhysicalControls = true
			end if

			if keyPress[0].down == true
				Helper.VMCurrentButton = 0
				Options.PhysicalControls = true
			end if
		end if

		checkResult = false

		if Helper.VMCurrentButton > -1
			if keyPress[0].start == true
				checkResult = true
			end if

			if keyPress[0].buttonA == true
				checkResult = true
			end if
		end if

		if checkResult == true
			PlaySfx(SfxName[Menu Select], false)
			StopMusic()
			object.state++
		end if

		if keyPress[0].buttonB == true
			object.state = EXTRASMENU_VISUALMODE_FADEOUT
			Object.Timer = 248
			PlaySfx(SfxName[Menu Back], false)

		end if
		break

	case EXTRASMENU_VISUALMODE_SELECTED
		if Object.Timer < 30
			Object.Timer++
		else
			Object.Timer = 0
			object.state++
		end if

		break

	case EXTRASMENU_VISUALMODE_VIDEOPLAY
		if Object.Timer < 384
			Object.Timer += 8
		else
			Helper.VMCurrentButton = -1
			object.state = EXTRASMENU_FADEIN
		end if

		temp0 = Object.Timer
		if temp0 > 255
			temp0 = 255
		end if
		SetScreenFade(0, 0, 0, temp0)
		break

	case EXTRASMENU_VISUALMODE_FADEOUT
		if Object.Timer > 0
			object.alpha = Object.Timer
			Object.Timer -= 8
		else
			object.alpha = 0
			object.state++
		end if
		break

	case EXTRASMENU_VISUALMODE_RETURN
		temp0 = Object.CurrentButton
		temp0 *= 40
		temp0 += screen.ycenter
		temp0 -= 87
		if object.ypos < temp0
			object.ypos += 8
			if object.ypos > temp0
				object.ypos = temp0
			end if
			object.alpha = 0
		else
			if Options.PhysicalControls == false
				Object.CurrentButton = -1
			end if
			object.state = EXTRASMENU_CONTROLS
			object.alpha = 255
		end if
		break

	case EXTRASMENU_EXIT_MENU
		if Object.Timer > 0
			object.alpha = Object.Timer
			Object.Timer -= 8
		else
			object.type = TypeName[Blank Object]
			MenuWindow.State = MENUWINDOW_SHRINK
			//All of this is MenuButton objects
			object[34].state = MENUBUTTON_BUTTONS_IN
			object[35].state = MENUBUTTON_BUTTONS_IN
			object[36].state = MENUBUTTON_BUTTONS_IN
			object[37].state = MENUBUTTON_BUTTONS_IN
			object[38].state = MENUBUTTON_BUTTONS_IN
			object[39].state = MENUBUTTON_BUTTONS_IN
			object[40].state = MENUBUTTON_BUTTONS_IN
			object[41].state = MENUBUTTON_BUTTONS_IN
			object[42].state = MENUBUTTON_BUTTONS_IN
			//End
			MenuHeading.State = MENUHEADING_LEAVE_SCREEN
			MenuHeading.Header = MAINMENU_HEADER
		end if
		break

	case EXTRASMENU_FADEIN
		if Object.Timer > 0
			Object.Timer -= 8
		else
			object.state = EXTRASMENU_VISUALMODE
			//PlayMusic(Options.Soundtrack)
		end if
		temp0 = Object.Timer
		if temp0 > 255
			temp0 = 255
		end if
		SetScreenFade(0, 0, 0, temp0)
		break

	case EXTRASMENU_RETURN_TO_TITLE
		Object.Timer += 4
		if Object.Timer == 384
			stage.activeList = PRESENTATION_STAGE
			stage.listPos = STAGE_P_TITLE
			LoadStage()
		end if
		SetScreenFade(0, 0, 0, Object.Timer)
		break

	end switch
end event


event ObjectDraw
	switch object.state
	case EXTRASMENU_ENTER_MENU
	case EXTRASMENU_CONTROLS
	case EXTRASMENU_SELECTED_OPTION
	case EXTRASMENU_LOAD_EXTRA_STAGE
	case EXTRASMENU_EXIT_MENU
	case EXTRASMENU_RETURN_TO_TITLE
		object.ypos = screen.ycenter
		object.ypos -= 87
		arrayPos0 = 0
		CallFunction(ExtrasMenu_DrawUnlocks) //Draw DA Garden

		object.ypos += 40
		arrayPos0++
		CallFunction(ExtrasMenu_DrawUnlocks) //Draw Visual Mode

		object.ypos += 40
		arrayPos0++
		CallFunction(ExtrasMenu_DrawUnlocks) //Draw Sound Test

		object.ypos += 40
		arrayPos0++
		CallFunction(ExtrasMenu_DrawUnlocks) //Draw Stage Select
		break

	case EXTRASMENU_LOAD_VISUALMODE
		arrayPos0 = Object.CurrentButton
		CallFunction(ExtrasMenu_DrawUnlocks)
		break

	case EXTRASMENU_VISUALMODE_FADEIN
	case EXTRASMENU_VISUALMODE
	case EXTRASMENU_VISUALMODE_VIDEOPLAY
	case EXTRASMENU_VISUALMODE_FADEOUT
	case EXTRASMENU_VISUALMODE_RETURN
	case EXTRASMENU_FADEIN
		temp0 = screen.xcenter
		temp0 -= 64
		DrawSpriteScreenFX(4, FX_INK, temp0, 96)

		if Helper.VMCurrentButton == 0
			DrawSpriteScreenFX(26, FX_INK, temp0, 96)
			DrawSpriteScreenFX(22, FX_INK, temp0, 96)
		else
			DrawSpriteScreenFX(18, FX_INK, temp0, 96)
		end if

		DrawSpriteScreenFX(6, FX_INK, temp0, 153)

		if Helper.VMCurrentButton == 2
			DrawSpriteScreenFX(26, FX_INK, temp0, 153)
			DrawSpriteScreenFX(24, FX_INK, temp0, 153)
		else
			DrawSpriteScreenFX(20, FX_INK, temp0, 153)
		end if

		temp0 += 128
		DrawSpriteScreenFX(5, FX_INK, temp0, 96)
		if Helper.VMCurrentButton == 1
			DrawSpriteScreenFX(26, FX_INK, temp0, 96)
			DrawSpriteScreenFX(23, FX_INK, temp0, 96)
		else
			DrawSpriteScreenFX(19, FX_INK, temp0, 96)
		end if

		DrawSpriteScreenFX(7, FX_INK, temp0, 153)
		if Helper.VMCurrentButton == 3
			DrawSpriteScreenFX(26, FX_INK, temp0, 153)
			DrawSpriteScreenFX(25, FX_INK, temp0, 153)
		else
			DrawSpriteScreenFX(21, FX_INK, temp0, 153)
		end if
		object.alpha = 255
		CallFunction(ExtrasMenu_DrawUnlocks)
		break

	case EXTRASMENU_VISUALMODE_SELECTED
		temp1 = Object.Timer
		temp1 &= 3
		temp1 >>= 1

		temp0 = screen.xcenter
		temp0 -= 64
		if Helper.VMCurrentButton == 0
			if temp1 == 0
				DrawSpriteScreenFX(4, FX_INK, temp0, 96)
				DrawSpriteScreenFX(26, FX_INK, temp0, 96)
			end if
			DrawSpriteScreenFX(22, FX_INK, temp0, 96)
		else
			DrawSpriteScreenFX(4, FX_INK, temp0, 96)
			DrawSpriteScreenFX(18, FX_INK, temp0, 96)
		end if

		if Helper.VMCurrentButton == 2
			if temp1 == 0
				DrawSpriteScreenFX(6, FX_INK, temp0, 153)
				DrawSpriteScreenFX(26, FX_INK, temp0, 153)
			end if
			DrawSpriteScreenFX(24, FX_INK, temp0, 153)
		else
			DrawSpriteScreenFX(6, FX_INK, temp0, 153)
			DrawSpriteScreenFX(20, FX_INK, temp0, 153)
		end if

		temp0 += 128
		if Helper.VMCurrentButton == 1
			if temp1 == 0
				DrawSpriteScreenFX(5, FX_INK, temp0, 96)
				DrawSpriteScreenFX(26, FX_INK, temp0, 96)
			end if
			DrawSpriteScreenFX(23, FX_INK, temp0, 96)
		else
			DrawSpriteScreenFX(5, FX_INK, temp0, 96)
			DrawSpriteScreenFX(19, FX_INK, temp0, 96)
		end if
		if Helper.VMCurrentButton == 3
			if temp1 == 0
				DrawSpriteScreenFX(7, FX_INK, temp0, 153)
				DrawSpriteScreenFX(26, FX_INK, temp0, 153)
			end if
			DrawSpriteScreenFX(25, FX_INK, temp0, 153)
		else
			DrawSpriteScreenFX(7, FX_INK, temp0, 153)
			DrawSpriteScreenFX(21, FX_INK, temp0, 153)
		end if
		object.alpha = 255
		CallFunction(ExtrasMenu_DrawUnlocks)
		break
	end switch
end event


event ObjectStartup
	switch engine.language
	case LANG_ENGLISH
		LoadSpriteSheet("Menu/MenuGfx2_EN.gif")
		break

	case LANG_FRENCH
		LoadSpriteSheet("Menu/MenuGfx2_FR.gif")
		break

	case LANG_ITALIAN
		LoadSpriteSheet("Menu/MenuGfx2_IT.gif")
		break

	case LANG_DEUTSCH
		LoadSpriteSheet("Menu/MenuGfx2_DE.gif")
		break

	case LANG_SPANISH
		LoadSpriteSheet("Menu/MenuGfx2_ES.gif")
		break

	case LANG_JAPANESE
		LoadSpriteSheet("Menu/MenuGfx2_JP.gif")
		break

	end switch

	SpriteFrame(4, 2, 32, 32, 479, 34) // #0 - Gear
	SpriteFrame(4, 2, 32, 32, 479, 359) // #1 - Lock Gear
	SpriteFrame(4, 2, 32, 32, 479, 34) // #2 - Gear 2
	SpriteFrame(4, 2, 32, 32, 479, 34) // #3 - Gear 3

	SpriteFrame(-18, -18, 36, 36, 476, 106) // #4 - Opening Icon
	SpriteFrame(-18, -18, 36, 36, 476, 143) // #5 - Pencil Test
	SpriteFrame(-18, -18, 36, 36, 476, 285) // #6 - Good Ending
	SpriteFrame(-18, -18, 36, 36, 476, 322) // #7 - Bad Ending

	SpriteFrame(45, 12, 13, 13, 488, 1) // #8 - Orange Triangle
	SpriteFrame(0, 0, 250, 37, 259, 421) // #9 - Selection Border

	arrayPos0 = 32
	arrayPos1 = 48
	temp0 = 0
	temp1 = 0
	while arrayPos0 < 39
		temp0 += saveRAM[arrayPos1]
		arrayPos1++
		temp1 += saveRAM[arrayPos1]
		arrayPos1 += 5
		temp0 += saveRAM[arrayPos1]
		arrayPos1 += 6
		temp0 += saveRAM[arrayPos1]
		arrayPos1 += 6
		arrayPos0++
	loop

	// TempValue0 will be used to check regular zones total time in time attack
	// TempValue1 checks for special stages total time instead
	if temp0 == 0
		temp0 = 400000

		temp1 = 400000
	end if

	if temp0 < 224757
		SpriteFrame(64, 12, 128, 16, 1, 120) // #10 - D. A. Garden
		Options.DAGardenFlag = true
	else
		SpriteFrame(64, 12, 128, 16, 1, 426) // #10 - Locked D. A. Garden
	end if

	if temp0 < 154612
		SpriteFrame(64, 12, 128, 16, 1, 137) // #11 - Visual Mode
		Options.VisualModeFlag = true
	else
		SpriteFrame(64, 12, 128, 16, 130, 426) // #11 - Locked Visual Mode
	end if

	if temp1 < 24207
		SpriteFrame(64, 12, 128, 16, 1, 154) // #12 - Sound Test
		Options.SoundTestFlag = true
	else
		SpriteFrame(64, 12, 48, 16, 404, 285) // #12 - Locked Sound Test
	end if

	if temp1 < 30125
		SpriteFrame(64, 12, 128, 16, 1, 171) // #13 - Stage Select
		Options.StageSelectFlag = true
	else
		SpriteFrame(64, 12, 48, 16, 404, 285) // #13 - Locked Stage Select
	end if

	if temp0 < 224757
		SpriteFrame(64, 12, 128, 16, 130, 120) // #14 - Select D. A. Garden
	else
		SpriteFrame(64, 12, 128, 16, 1, 426) // #14 - Locked D. A. Garden
	end if

	if temp0 < 154612
		SpriteFrame(64, 12, 128, 16, 130, 137) // #15 - Select Visual Mode
	else
		SpriteFrame(64, 12, 128, 16, 130, 426) // #15 - Locked Visual Mode
	end if

	if temp1 < 24207
		SpriteFrame(64, 12, 128, 16, 130, 154) // #16 - Select Sound Test
	else
		SpriteFrame(64, 12, 48, 16, 404, 285) // #16 - Locked Sound Test
	end if

	if temp1 < 30125
		SpriteFrame(64, 12, 128, 16, 130, 171) // #17 - Select Stage Select
	else
		SpriteFrame(64, 12, 48, 16, 404, 285) // #17 - Locked Stage Select
	end if

	SpriteFrame(-48, 25, 96, 8, 1, 496) // #18 - Opening Text
	SpriteFrame(-48, 25, 96, 8, 1, 504) // #19 - Pencil Test Text
	SpriteFrame(-48, 25, 96, 8, 98, 496) // #20 - Good Ending
	SpriteFrame(-48, 25, 96, 8, 98, 504) // #21 - Bad Ending

	SpriteFrame(-48, 25, 96, 8, 195, 496) // #22 - Opening Text Highlight
	SpriteFrame(-48, 25, 96, 8, 195, 504) // #23 - Pencil Test Text Highlight
	SpriteFrame(-48, 25, 96, 8, 292, 496) // #24 - Good Ending Text Highlight
	SpriteFrame(-48, 25, 96, 8, 292, 504) // #25 - Bad Ending Text Highlight

	SpriteFrame(-24, -24, 48, 48, 405, 88) // #26 - Icon Border
end event


// ========================
// Editor Subs
// ========================

event RSDKDraw
	DrawSprite(0)
end event


event RSDKLoad
	LoadSpriteSheet("Menu/MenuGfx2_EN.gif")
	SpriteFrame(32, 0, 160, 30, 1, 708) // #8 Extras


end event
